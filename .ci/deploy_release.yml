stages:
  - build
  - deploy

variables:
  MAVEN_CLI_OPTS: "-s .ci/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  PURGE_CF_CACHE: 'curl -X POST https://api.cloudflare.com/client/v4/zones/${CF_ZONE}/purge_cache -H "Content-Type: application/json" -H "Authorization:Bearer ${CF_BEARER}" --data "{\"purge_everything\":true}"'

build:
  stage: build
  image: registry.gitlab.com/tinymediamanager/docker/packaging:20220601182613
  environment:
    name: release
    url: https://release.tinymediamanager.org
  allow_failure: false
  tags:
    - docker # force running on gitlab  
  script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    ##
    ## set gpg key
    ##
    - echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
    - gpg --list-keys

    ##
    ## configure git for version push
    ##
    - git config --global user.name ${SSH_USER_NAME}
    - git config --global user.email ${SSH_USER_EMAIL}
    - git checkout -f ${CI_COMMIT_REF_NAME}
    - git remote set-url origin git@gitlab.com:tinyMediaManager/${CI_PROJECT_NAME}.git

    ##
    ## perform the release
    ##
    - mvn $MAVEN_CLI_OPTS -P gitlab-ci -P dist -DbuildNumber=${CI_COMMIT_SHORT_SHA} -Dgetdown=getdown.txt -Dthread_pool_size=1 release:prepare release:perform -Dresume=false -DautoVersionSubmodules=true -DdryRun=false -Dmaven.test.skip=true -DskipITs -DscmCommentPrefix="[ci skip]"

    # build windows installer
    - chmod 777 . dist
    - sudo -u xclient PATH=$PATH:/opt/bin AppBundler/create_windows_installer.sh

    # build macOS dmg file
    - sh AppBundler/create_dmg.sh

    # push the build to the webserver
    - lftp -c "set ftp:ssl-allow no; open -u ${FTP_USER_RELEASE},${FTP_PASSWORD_RELEASE} ${FTP_HOST}; mirror -Rev build/ ./upload/v4/build; mirror -Rev dist/ ./upload/v4/dist; chmod -R g+w ./upload/v4"

    # and publish the files on the webserver
    - curl https://release.tinymediamanager.org/${PUBLISH_ENDPOINT_V4}
    - curl https://release.tinymediamanager.org/${CREATE_INDEX_V4}

    # purge CF cache
    - 'eval "$PURGE_CF_CACHE"'

  artifacts:
    expire_in: never
    paths:
      - build/
      - dist/
