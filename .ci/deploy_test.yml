stages:
  - build
  - deploy

build:
  stage: build
  image: registry.gitlab.com/tinymediamanager/docker/packaging
  environment:
    name: test
    url: https://test.tinymediamanager.org
  allow_failure: false
  tags:
    - tmm # force running on own runners
  script:
    # generate changelog.txt for nightly builds
    - sh generate_changelog.sh

    # package archives
    - mvn $MAVEN_CLI_OPTS -P gitlab-ci -P dist -DbuildNumber=${CI_COMMIT_SHORT_SHA} -Dgetdown=getdown-nightly.txt -Dnightly=true -Dthread_pool_size=1 clean package

    # build windows installer
    - chmod 777 . dist
    - sudo -u xclient PATH=$PATH:/opt/bin AppBundler/create_windows_installer.sh

    # build macOS dmg file
    - sh AppBundler/create_dmg.sh

    # push the build to the webserver
    - lftp -c "set ftp:ssl-allow no; open -u ${FTP_USER_TEST},${FTP_PASSWORD_TEST} ${FTP_HOST}; mirror -Rev build/ ./upload/v4/build; mirror -Rev dist/ ./upload/v4/dist;"
    # and publish the files on the webserver
    - curl http://test.tinymediamanager.org/${PUBLISH_ENDPOINT_V4}

  artifacts:
    expire_in: 2 days
    paths:
      - build/
      - dist/

deploy:
  stage: deploy
  needs:
    - build
  trigger:
    project: tinyMediaManager/test.tinymediamanager.org

deploy-docker:
  stage: deploy
  image: docker:latest
  services:
    - name: docker:dind
  needs:
    - build
  variables:
    IMAGE_NAME: tinymediamanager/tinymediamanager:4-nightly
  script:
    # login
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

    # build
    - tar xzf dist/tmm*linux-amd64.tar.gz -C docker/
    - cd docker
    - docker build -f Dockerfile.test -t $IMAGE_NAME .

    # push to the registry
    - docker push $IMAGE_NAME
